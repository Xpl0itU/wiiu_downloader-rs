mod keygen;

use gtk::prelude::*;
use gtk::{Application, ApplicationWindow, Box, Button, ProgressBar, Label, glib};

use std::fs::File;

use std::io::Cursor;
use std::io::Read;
use std::io::Seek;
use std::io::Write;

use std::sync::atomic::{AtomicBool, Ordering};

use keygen::generate_key;

static QUEUE_CANCELLED: AtomicBool = AtomicBool::new(false);

pub fn set_queue_cancelled(value: bool) {
    QUEUE_CANCELLED.store(value, Ordering::SeqCst);
}

pub fn get_queue_cancelled() -> bool {
    return QUEUE_CANCELLED.load(Ordering::SeqCst);
}

fn path_exists(path: &str) -> bool {
    std::fs::metadata(path).is_ok()
}

fn char_to_int(c: char) -> u8 {
    match c {
        '0'..='9' => c as u8 - b'0',
        'A'..='F' => c as u8 - b'A' + 10,
        'a'..='f' => c as u8 - b'a' + 10,
        _ => 0,
    }
}

fn hex_to_bytes(input: &str, output: &mut [u8]) {
    let input_len = input.len();
    let mut i = 0;
    while i < input_len {
        output[i / 2] = char_to_int(input.chars().nth(i).unwrap()) * 16
            + char_to_int(input.chars().nth(i + 1).unwrap());
        i += 2;
    }
}

fn create_ticket(title_id: &str, title_key: &str, title_version: u16, output_path: &str) {
    let mut ticket_data: [u8; 848] = [0x00, 0x01, 0x00, 0x04, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0xd1, 0x5e, 0xa5, 0xed, 0x15, 0xab, 0xe1, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x6f, 0x6f, 0x74, 0x2d, 0x43, 0x41, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x2d, 0x58, 0x53, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0xfe, 0xed, 0xfa, 0xce, 0x01, 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x14, 0x00, 0x01, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x84, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    hex_to_bytes(title_id, &mut ticket_data[476..]);
    hex_to_bytes(title_key, &mut ticket_data[447..]);
    ticket_data[486..488].copy_from_slice(&title_version.to_be_bytes());
    let mut file = match File::create(output_path) {
        Ok(file) => file,
        Err(err) => {
            eprintln!(
                "Error: The file \"{}\" couldn't be opened. {:?}\n",
                output_path,
                err
            );
            return;
        }
    };
    if let Err(err) = file.write_all(&ticket_data) {
        eprintln!("Error: Failed to write to file {}. {:?}", output_path, err);
        return;
    }
    if let Err(err) = file.sync_all() {
        eprintln!("Error: Failed to sync file {}. {:?}", output_path, err);
        return;
    }
}

fn progress_dialog() {
    let app = Application::new(
        Some("com.example.progress-dialog"),
        Default::default(),
    );
    
    app.connect_activate(|app| {
        let window = ApplicationWindow::new(app);
        window.set_title(Some("Download Progress"));
        window.set_default_size(400, 100);

        let box_container = Box::new(gtk::Orientation::Vertical, 10);

        let progress_bar = ProgressBar::new();
        progress_bar.set_fraction(0.0);
        box_container.append(&progress_bar);

        let label = Label::new(Some("0%"));
        box_container.append(&label);

        let button = Button::builder()
            .label("Download")
            .build();
        let cancel_button = Button::builder()
            .label("Cancel")
            .sensitive(false)
            .build();
        let progress_bar_clone = progress_bar.clone();
        let label_clone = label.clone();
        let cancel_button_clone = cancel_button.clone();
        button.connect_clicked(move |_| {
            cancel_button_clone.set_sensitive(true);
            download_title("00050000101c9500", "BOTW EUR", &progress_bar_clone, &label_clone, &cancel_button_clone).unwrap();
            set_queue_cancelled(true);
        });
        box_container.append(&button);
        box_container.append(&cancel_button);

        window.set_child(Some(&box_container));
        window.show();
    });

    app.run();
}

fn download_file(url: &str, path: &str, progress_bar: &ProgressBar, label: &Label, cancel_button: &Button) -> Result<(), String> {
    // Reqwest setup
    let mut res = reqwest::blocking::Client::new()
        .get(url)
        .send()
        .or(Err(format!("Failed to GET from '{}'", &url)))?;
    let total_size = res
        .content_length()
        .ok_or(format!("Failed to get content length from '{}'", &url))?;

    // download chunks
    let mut file = std::fs::File::create(path).or(Err(format!("Failed to create file '{}'", path)))?;
    let mut downloaded: u64 = 0;
    let mut writer = Cursor::new(Vec::new());

    loop {
        let mut buffer = [0; 1024];
        let bytes_read = res.read(&mut buffer).unwrap();

        if bytes_read == 0 {
            break;
        }

        downloaded += bytes_read as u64;
        let progress = downloaded as f64 / total_size as f64;
        progress_bar.set_fraction(progress);

        let percentage = progress * 100.0;
        let percentage_string = format!("{:.0}%", percentage);
        label.set_text(&percentage_string);
        while glib::MainContext::pending(&glib::MainContext::default()) {
            glib::MainContext::iteration(&glib::MainContext::default(), true);
        }

        writer.write_all(&buffer[..bytes_read]).unwrap();

        cancel_button.connect_clicked(move |c_button| {
            std::mem::drop(bytes_read);
            set_queue_cancelled(true);
            c_button.set_sensitive(false);
        });
    }

    file.write_all(&writer.into_inner()).unwrap();

    return Ok(());
}

pub fn download_title(title_id: &str, name: &str, progress_bar: &ProgressBar, label: &Label, cancel_button: &Button) -> Result<(), String> {
    if !path_exists(name) {
        std::fs::create_dir(name).unwrap();
    }

    let base_url = format!("http://ccs.cdn.c.shop.nintendowifi.net/ccs/download/{}", title_id);

    match download_file(&format!("{}/{}", base_url, "tmd"), &format!("{}/title.tmd", name), progress_bar, label, cancel_button) {
        Ok(_) => println!("TMD Download ok"),
        Err(e) =>  {
            println!("TMD Download error");
            return Err(e);
        },
    }

    let tmd = std::fs::File::open(format!("{}/title.tmd", name)).unwrap();
    let mut reader = std::io::BufReader::new(tmd);
    let mut u16_buf = vec![0u8; 2];
    reader.seek(std::io::SeekFrom::Start(478)).unwrap();
    reader.read_exact(&mut u16_buf).unwrap();

    let mut content_count: u16 = 0;
    for byte in &u16_buf {
        content_count = (content_count << 8) | (*byte as u16);
    }

    reader.seek(std::io::SeekFrom::Start(476)).unwrap();
    reader.read_exact(&mut u16_buf).unwrap();

    let mut title_version: u16 = 0;
    for byte in &u16_buf {
        title_version = (title_version << 8) | (*byte as u16);
    }

    create_ticket(title_id, &generate_key(title_id), title_version, &format!("{}/title.tik", name));

    let mut u32_buf = vec![0u8; 4];

    for content in 0..content_count {
        if !get_queue_cancelled() {
            let offset = 2820 + (48 * content);
            reader.seek(std::io::SeekFrom::Start(offset.into())).unwrap();
            reader.read_exact(&mut u32_buf).unwrap();
            let mut id: u32 = 0;
            for byte in &u32_buf {
                id = (id << 8) | (*byte as u32);
            }
            download_file(&format!("{}/{:08x}", base_url, id), &format!("{}/{:08x}.app", name, id), progress_bar, label, cancel_button).unwrap();
            let mut has_hash_buffer = vec![0u8; 1];
            reader.seek(std::io::SeekFrom::Start((offset + 7).into())).unwrap();
            reader.read_exact(&mut has_hash_buffer).unwrap();
            let has_hash = (has_hash_buffer[0] & 0x2) == 2;
            if has_hash {
                download_file(&format!("{}/{:08x}.h3", base_url, id), &format!("{}/{:08x}.h3", name, id), progress_bar, label, cancel_button).unwrap();
            }
        }
    }

    return Ok(());
}

fn main() {
    progress_dialog();
}
